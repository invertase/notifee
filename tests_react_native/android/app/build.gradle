apply plugin: 'com.android.application'

import com.android.build.OutputFile

project.ext.react = [
  entryFile   : "index.js",
  entryFileRelease   : "index.test.js",
  entryFileTest   : "index.test.js",
  enableHermes: true,  // clean and rebuild if changing
]

// up to mono root
apply from: "../../node_modules/react-native/react.gradle"

def enableSeparateBuildPerCPUArchitecture = false

/**
 * Use international variant JavaScriptCore
 * International variant includes ICU i18n library and necessary data allowing to use
 * e.g. Date.toLocaleString and String.localeCompare that give correct results
 * when using with locales other than en-US.
 * Note that this variant is about 6MiB larger per architecture than default.
 */
def useIntlJsc = false

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false)

android {
  compileSdkVersion 29
  defaultConfig {
    applicationId "com.invertase.testing"

    minSdkVersion 16
    targetSdkVersion 29
    versionCode 1
    versionName "1.0"

    testBuildType System.getProperty('testBuildType', 'debug')
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }
  splits {
    abi {
      reset()
      enable enableSeparateBuildPerCPUArchitecture
      universalApk false  // If true, also generate a universal APK
      include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
    }
  }

  signingConfigs {
    staging {
      storeFile file("keystore.jks")
      storePassword "12345678"
      keyAlias "key0"
      keyPassword "12345678"
    }
    release {
      storeFile file("keystore.jks")
      storePassword "12345678"
      keyAlias "key0"
      keyPassword "12345678"
    }
  }

  buildTypes {
    debug {
      minifyEnabled false
      matchingFallbacks = ['debug']
      applicationIdSuffix ".dev"
      versionNameSuffix "Dev"
    }
    staging {
      minifyEnabled false
      matchingFallbacks = ['debug']
      applicationIdSuffix ".staging"
      versionNameSuffix "Staging"
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
      signingConfig signingConfigs.staging
    }
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
      signingConfig signingConfigs.release
      matchingFallbacks = ['release']
    }
  }

  compileOptions {
    sourceCompatibility 1.8
    targetCompatibility 1.8
  }

  // applicationVariants are e.g. debug, release
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      // For each separate APK per architecture, set a unique version code as described here:
      // https://developer.android.com/studio/build/configure-apk-splits.html
      def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
      def abi = output.getFilter(OutputFile.ABI)

      if (abi != null) {  // null for the universal-debug, universal-release variants
        output.versionCodeOverride =
          versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
      }
    }
  }

  packagingOptions {
    exclude 'META-INF/proguard/androidx-annotations.pro'
    exclude 'META-INF/-no-jdk.kotlin_module'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    pickFirst '**/armeabi-v7a/libc++_shared.so'
    pickFirst '**/x86/libc++_shared.so'
    pickFirst '**/arm64-v8a/libc++_shared.so'
    pickFirst '**/x86_64/libc++_shared.so'
    pickFirst '**/x86/libjsc.so'
    pickFirst '**/armeabi-v7a/libjsc.so'
  }
}

dependencies {
  //noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:+'

  if (enableHermes) {
    def hermesPath = "../../node_modules/hermes-engine/android/"
    debugImplementation files(hermesPath + "hermes-debug.aar")
    releaseImplementation files(hermesPath + "hermes-release.aar")
  } else if (useIntlJsc) {
    implementation 'org.webkit:android-jsc-intl:+'
  } else {
    implementation 'org.webkit:android-jsc:+'
  }

  androidTestImplementation 'junit:junit:4.12'
  androidTestImplementation 'androidx.test:runner:1.2.0'
  androidTestImplementation 'androidx.test:rules:1.2.0'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}

//task buildNotifeeCore(type: GradleBuild) {
//  buildFile = '../../../android/build.gradle'
//  tasks = ['assembleRelease'] // change to assembleDebug to use debug builds
//}
//
//preBuild.dependsOn buildNotifeeCore

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply plugin: 'com.google.gms.google-services'
